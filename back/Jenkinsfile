pipeline {
    agent any
    tools {
        maven 'maven-3.9.4' 
    }
     environment {
        DOCKER_IMAGE = "eyaea/devops-demo"
        DOCKER_TAG = "latest"
        DOCKER_REGISTRY = "your-docker-registry-url"
        DOCKER_CREDENTIALS_ID = 'dockerhub'
        SONARQUBE_CREDENTIALS_ID = 'sonartoken'
    }
    stages {
        stage('Chechout scm') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/robinmetro1/jenkins-pipeline.git']])                
            }
        }
        /***stage('SonarQube analysis for spring app') {
            steps{
               dir('/var/jenkins_home/workspace/devops-test/back') {
                withSonarQubeEnv(credentialsId: 'sonartoken') {

                 }
           }
        }
        }***/

        stage('Build Maven') {
            steps {
                 dir('/var/jenkins_home/workspace/devops-test/back') {
                        sh 'mvn clean package'

                 }
            }
            post {
                success {
                    echo "Success: Maven build completed"
                }
                failure {
                    echo "Failed: Maven build"
                }
            }
        }
    
        stage('Build Docker Image') {
            steps {
                script {
                     dir('/var/jenkins_home/workspace/devops-test/back') {
                    // Build your Docker image
                    def dockerImage = docker.build("${DOCKER_IMAGE}:$BUILD_ID", ".")
                    }
                }
            }
        }
       
        stage('Push Docker image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', DOCKER_CREDENTIALS_ID) {
                       def dockerImage = docker.image(env.DOCKER_IMAGE)
                        dockerImage.push("$BUILD_ID")
                    }
                }
            }
            post {
                always{
                    script {
                        sh 'docker logout'
                    }                
                }
            }
        }
        
        stage('Deploy to k8s') {
            steps {
                withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kubeconfig', namespace: '', serverUrl: '']]) {
    // some block

                echo "Running k8s........................"
                sh 'kubectl get pods '

                }
            }
        }
        
        stage('Test') {
            steps {
                echo "Running tests........................"
                // Add test steps here
            }
        }
    }
}
    


