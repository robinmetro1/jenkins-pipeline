pipeline {
    agent any
    tools {
        maven 'maven-3.9.4' 
    }
    environment {
        DOCKER_IMAGE = "eyaea/devops-demo"
        DOCKER_TAG = "latest"
        DOCKER_REGISTRY = "your-docker-registry-url"
        DOCKER_CREDENTIALS_ID = 'dockerhub'
        SONARQUBE_CREDENTIALS_ID = 'sonartoken'
    }
    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }
        /***stage('SonarQube analysis for spring app') {
            steps{
               dir('/var/jenkins_home/workspace/devops-test/back') {
                withSonarQubeEnv(credentialsId: 'sonartoken') {

                 }
           }
        }
        }***/

        stage('Build Maven') {
            steps {
                dir('back') {
                    sh 'mvn clean package'
                }
            }
            post {
                success {
                    echo "Success: Maven build completed"
                }
                failure {
                    echo "Failed: Maven build"
                }
            }
        }
    
        stage('Build Docker Image') {
            steps {
                script {
                    dir('back') {
                        // Build your Docker image
                        def dockerImage = docker.build("${DOCKER_IMAGE}:${BUILD_TAG}", ".")
                    }
                }
            }
        }
       
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', DOCKER_CREDENTIALS_ID) {
                        def dockerImage = docker.image(env.DOCKER_IMAGE)
                        dockerImage.push("${BUILD_TAG}")
                    }
                }
            }
            post {
                always {
                    script {
                        sh 'docker logout'
                    }                
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps{
                script{
                    withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kubeconfig', namespace: '', serverUrl: '']]) {
                   sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
                   sh 'chmod u+x ./kubectl'  
                   sh './kubectl get pods'
                }
                }
            }
          
            
        }
        
        stage('Test') {
            steps {
                echo "Running tests..."
                // Add test steps here
            }
        }
    }
}
